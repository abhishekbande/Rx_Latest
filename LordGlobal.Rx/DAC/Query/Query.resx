<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ADD_ADMIN_DETAILS" xml:space="preserve">
    <value>INSERT INTO admin_profile(admin_id,email_id,admin_name,gender,photo) VALUES (@userId,@emailId,@adminName,@gender,@photo);</value>
  </data>
  <data name="ADD_DOCTOR_REGISTRATION_DATA" xml:space="preserve">
    <value>INSERT INTO doctor_profile(
doctor_id,
doctor_name,
email_id,gender,
permanent_registration_number,
specialist,
qualification,
age,
clinic_address,
clinic_name,
phone_number,
landline,
city,
pincode,
photo)
VALUES(
@doctorId,
@doctorName,
@emailId,@gender,
@regNo,
@sepcialist,
@qualification,
@age,
@clinicAddress,
@clinicName,
@phoneNumber,
@landline,
@city,
@pincode,
@photo);</value>
  </data>
  <data name="ADD_PATIENT_DETAILS" xml:space="preserve">
    <value>INSERT INTO patient_profile
(doctor_id,
patient_name,
email_id,
age,
address,
phone_number,
marital_status,
temperature,
gender,
weight,
admit_dt_tm,
bp,
checked_by_doctor)
VALUES
(CASE (SELECT user_role FROM login_details where user_id=@loggerId) 
WHEN 'Doctor' THEN (SELECT doctor_id FROM doctor_profile WHERE doctor_id=@loggerId)
WHEN 'Receptionist' THEN (SELECT doctor_id FROM receptionist_profile WHERE receptionist_id=@loggerId)
END,
@patientName,
@emailId,
@age,
@address,
@phoneNo,
@maritalStatus,
@temperature,
@gender,
@weight,
now(),
@bp,
'false'
)</value>
  </data>
  <data name="ADD_RECEPTIONIST_DETAILS" xml:space="preserve">
    <value>INSERT INTO receptionist_profile(receptionist_id,receptionist_name,gender,email_id,doctor_id,phone_number,photo) VALUES (@userId,@receptionistName,@gender,@email,@userId,@phoneNumber,@photo);</value>
  </data>
  <data name="GET_ADMIN_PROFILE_DETAILS" xml:space="preserve">
    <value>SELECT * FROM admin_profile WHERE admin_id=@userId</value>
  </data>
  <data name="GET_DOCTOR_PROFILE_DETAILS" xml:space="preserve">
    <value>SELECT * FROM doctor_profile WHERE doctor_id=@userId</value>
  </data>
  <data name="GET_LOGIN_DETAILS" xml:space="preserve">
    <value>SELECT * FROM login_details WHERE user_name=@userName</value>
  </data>
  <data name="GET_MAIL_DETAILS" xml:space="preserve">
    <value>SELECT md.mail_from,
md.mail_to,
md.mail_dt,
md.message,
md.status,
CASE (SELECT user_role FROM login_details where user_id=md.mail_from) 
WHEN 'Doctor' THEN (SELECT doctor_name FROM doctor_profile WHERE doctor_id=md.mail_from)
WHEN 'Admin' THEN (SELECT admin_name FROM admin_profile WHERE admin_id=md.mail_from)
WHEN 'Receptionist' THEN (SELECT receptionist_name FROM receptionist_profile WHERE receptionist_id=md.mail_from)
END as from_name 
FROM mail_details md 
WHERE mail_to=@userId</value>
  </data>
  <data name="GET_NOTIFICATION_DETAILS" xml:space="preserve">
    <value>SELECT * FROM notification_details WHERE user_id=@userId</value>
  </data>
  <data name="GET_PATIENT_COUNT_BY_DOCTOR_ID" xml:space="preserve">
    <value>SELECT (SELECT COUNT(*) FROM patient_profile)as total_count,
(SELECT COUNT(*) FROM patient_profile WHERE doctor_id=@doctorId) as count_by_doctor FROM patient_profile</value>
  </data>
  <data name="GET_PATIENT_DETAILS" xml:space="preserve">
    <value>SELECT * FROM patient_profile WHERE patient_id=@patientId</value>
  </data>
  <data name="GET_RECEPTIONIST_PROFILE_DETAILS" xml:space="preserve">
    <value>SELECT * FROM receptionist_profile WHERE receptionist_id=@userId</value>
  </data>
  <data name="GET_TASK_DETAILS" xml:space="preserve">
    <value>SELECT * FROM task_details WHERE user_id=@userId</value>
  </data>
  <data name="GET_USER_ROLE" xml:space="preserve">
    <value>SELECT user_role FROM login_details WHERE user_id=@userId</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>SELECT LAST_INSERT_ID() as id FROM patient_profile;</value>
  </data>
  <data name="UPDATE_LAST_LOGIN_DATE_TIME" xml:space="preserve">
    <value>UPDATE login_details set last_login_dt_tm=@loginDateTime where user_id=@userId</value>
  </data>
  <data name="UPDATE_PATIENT_DETAILS" xml:space="preserve">
    <value>UPDATE patient_profile SET patient_name=@patientName,
email_id=@emailId,
age=@age,
address=@address,
phone_number=@phoneNo,
marital_status=@maritalStatus,
temperature=@temperature,
gender=@gender,
weight=@weight,
bp=@bp,
doctor_id=(
CASE (SELECT user_role FROM login_details where user_id=@loggerId) 
WHEN 'Doctor' THEN (SELECT doctor_id FROM doctor_profile WHERE doctor_id=@loggerId)
WHEN 'Receptionist' THEN (SELECT doctor_id FROM receptionist_profile WHERE receptionist_id=@loggerId)
END) WHERE patient_id=@patientId</value>
  </data>
</root>